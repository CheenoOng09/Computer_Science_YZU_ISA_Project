// Name: Mikollito Ong 林米克 
// Student ID Number: 1103558
// This program is to find the average number for odd and even group of integers.
// The initial value of Program Counter: 20

	LOAD R1 254 	// INPUT THE NUMBER OF TEST CASES FROM YOUR KEYBOARD
START:
	LOAD R2 254 	// INPUT THE NUMBER OF INTEGERS YOUR PROGRAM EXPECTS TO READ
	ADD R3 R2 R0 	// COPY THE VALUE OF R2 TO R3. R3 WILL ACT AS A COUNTER FOR NUMBER OF INTEGERS
	ADD R4 R0 R0 	// SET R4 TO 0.
	ADDI R4 30 	// SET THE STARTING ADDRESS TO 30
	ADD R5 R0 R0	// SET THE VALUE OF R5 TO 0
	LOAD R5 254 	// INPUT THE INTEGER FROM YOUR KEYBOARD. THIS INTEGER WILL BE STORED IN AN ARRAY
	STOREI R4 R5 	// STORE THE USER INPUT INTEGER IN THE ARRAY
	ADDI R4 1 	// UPDATE THE ADDRESS BY INCREMENTING TO STORE THE NEXT ARRAY ELEMENT
	ADDI R3 -1 	// DECREMENT VALUE OF R3 BY 1 (COUNTER FOR NUMBER OF INTEGERS HAS BEEN REDUCED TO 1)
	JUMPNE R3 -4 	// IF THE R3 COUNTER HAS NOT REACHED ZERO, KEEP PUTTING NEW INTEGERS UNTIL R3 COUNTER BECOMES 0

	ADD R3 R0 R0	// RESET THE COUNTER TO 0
	ADD R3 R2 R0	// INITIALIZE THE COUNTER TO THE VALUE OF R2
	ADD R10 R0 R0	// COUNTER FOR AMOUNT OF ODD NUMBERS THAT WILL BE DISTRIBUTED (WILL ALSO ACT AS A DIVISOR LATER WHEN FINDING THE AVERAGE FOR ODD GROUP OF INTEGERS)
	ADD R11 R0 R0	// COUNTER FOR AMOUNT OF EVEN NUMBERS THAT WILL BE DISTRIBUTED (WILL ALSO ACT AS A DIVISOR LATER WHEN FINDING THE AVERAGE FOR EVEN GROUP OF INTEGERS)
	ADD R6 R0 R0	// CLEAR R6 (WILL SERVE AS AN ARRAY FOR ODD INTEGERS)
	ADD R7 R0 R0	// CLEAR R7 (WILL SERVE AS AN ARRAY FOR EVEN INTEGERS)
	ADDI R6 60	// SET THE STARTING ADDRESS BY 60 FOR ODD ARRAY
	ADDI R7 90	// SET THE STARTING ADDRESS BY 90 FOR EVEN ARRAY
	ADDI R4 -1

C:	// IDENTIFYING IF ODD OR EVEN INTEGER
	ADD R9 R0 R0	// CLEAR R9. R9 WILL PLAY A ROLE IN DISTRIBUTING AN INTEGER IN ODD OR EVEN GROUP OF INTEGERS
	ADD R8 R0 R0	// CLEAR R8. R8 WILL HOLD THE COPIED VALUE OF EACH INTEGER IN THE ORIGINAL ARRAY AND WILL BE USED TO DETERMINE IF THE INTEGER IS ODD OR EVEN
	ADDI R3 -1	// DECREMENT THE MAIN COUNTER BY 1
	LOADI R8 R4	// STORE A COPY OF ARRAY R4 VALUE INSIDE R8.
	JUMPEQ R8 B	// JUMP TO POINT B IF THE STORED INTEGER IS ALREADY 0 BEFORE DETERMINING IF IT IS AN ODD OR EVEN INTEGER. BECAUSE 0 WILL BE CONSIDERED AS AN EVEN NUMBER.
	ADDI R8 -2	// SUBSTRACT THE VALUE OF R8 BY 2
	JUMPGT R8 -1	// KEEP SUBTRACTING UNTIL R8 REACHES EITHER 0 OR -1
	JUMPEQ R8 B	// IF R8 = 0, IT IS AN EVEN NUMBER. JUMP TO B  
	JUMPNE R8 A	// IF R8 = -1, IT IS AN ODD NUMBER. JUMP TO A

	// DISTRIBUTE ODD IN AN ODD ARRAY R6
A:
	LOADI R9 R4	// STORE A COPY OF ARRAY R4 VALUE INSIDE R9.
	STOREI R6 R9	// STORE THE VALUE OF R9 INTO THE R6 ODD ARRAY
	ADDI R6 1	// ACCESS THE NEXT ELEMENT IN ODD ARRAY
	ADDI R10 1	// INCREMENT NUMBER OF ODD INTEGER BY 1
	ADDI R4 -1	// ACCESS THE PREVIOUS ELEMENT IN ORIGINAL ARRAY
	JUMPGT R3 C	// IF THE R3 MAIN COUNTER HAS NOT REACHED 0, KEEP INDENTIFYING AND DISTRIBUTING THE INTEGERS STORED INSIDE R4
	JUMPGE R3 D	// IF THE R3 MAIN COUNTER REACHES 0, MOVE ON TO THE NEXT PHASE IN POINT D BECAUSE THERE ARE NO MORE INTEGERS LEFT TO DISTRIBUTE.

	// DISTRIBUTE EVEN IN AN EVEN ARRAY R7 
B:
	LOADI R9 R4	// STORE A COPY OF ARRAY R4 VALUE INSIDE R9.
	STOREI R7 R9	// STORE THE VALUE OF R9 INTO THE R7 EVEN ARRAY
	ADDI R7 1	// ACCESS THE NEXT ELEMENT IN EVEN ARRAY
	ADDI R11 1	// INCREMENT NUMBER OF EVEN INTEGER BY 1
	ADDI R4 -1	// ACCESS THE PREVIOUS ELEMENT IN ORIGINAL ARRAY
	JUMPGT R3 C	// IF THE R3 MAIN COUNTER HAS NOT REACHED 0, KEEP INDENTIFYING AND DISTRIBUTING THE INTEGERS STORED INSIDE R4
	JUMPGE R3 D	// IF THE R3 MAIN COUNTER REACHES 0, MOVE ON TO THE NEXT PHASE IN POINT D BECAUSE THERE ARE NO MORE INTEGERS LEFT TO DISTRIBUTE.

	// FINDING THE TOTAL SUM FOR ODD GROUP OF INTEGERS (R6)
D:
	ADDI R6 -1	
	ADD R2 R0 R0	// CLEAR THE R2. R2 WILL ACT AS A COUNTER.
	ADD R2 R0 R10	// COPY THE VALUE OF R10 TO R2. R10 AND R2 NOW HOLDS THE VALUE OF THE AMOUNT OF ODD INTEGERS.
	ADD R8 R0 R0	// SET R8 TO 0. R8 WILL BE USED TO STORE AND HOLD THE REMAINDER VALUE.
	ADD R3 R0 R0	// SET R3 TO 0. R3 WILL BE USED TO STORE AND HOLD THE AVERAGE NUMBER VALUE.
	JUMPEQ R10 E	// JUMP TO POINT E IF THERE ARE NO ODD INTEGERS AT ALL.

	ADD R9 R0 R0	// CLEAR R9.
	LOADI R9 R6	// STORE A COPY OF ARRAY R6 VALUE TO R9.
	ADD R8 R8 R9	// ADD UP ALL THE INTEGERS STORED IN R9 INTO R8.
	ADDI R6 -1	// ACCESS THE PREVIOUS ELEMENT OF ARRAY R6.
	ADDI R2 -1	// DECREMENT R2 COUNTER BY 1.
	JUMPNE R2 -5	// KEEP SUMMING UP ALL THE INTEGERS IN ARRAY R6 UNTIL THE COUNTER R2 HAS REACHED 0.
	
	// FINDING THE AVERAGE FOR ODD GROUP OF INTEGERS (R6)
	ADDI R6 1
	SUB R8 R8 R10	// SUBTRACT R8 WITH R10 UNTIL R8 BECOMES 0, OR LESS THAN 0. AND IF LESS THAN 0, REVERT 1 STEP BACKWARD AND KEEP THE VALUE AS REMAINDER.
	ADDI R3 1	// ADD 1 TO THE VALUE OF AVERAGE.
	JUMPGT R8 -2	// AS LONG AS THE REMAINDER IS GREATER THAN 0 AND GREATER THAN R10, JUST KEEP SUBTRACTING.
	JUMPGE R8 3	// IF R8 = 0, THAT MEANS IT HAS NO REMAINDER.
	ADDI R3 -1	// REVERT ONE STEP BACKWARDS.
	ADD R8 R8 R10	// REVERT ONE STEP BACKWARDS.
	STORE 255 R3	// PRINT THE VALUE OF AVERAGE.
	STORE 255 R8	// PRINT THE VALUE OF REMAINDER.

	// FINDING THE TOTAL SUM FOR EVEN GROUP OF INTEGERS (R7)
F:
	ADDI R7 -1	
	ADD R2 R0 R0	// CLEAR THE R2. R2 WILL ACT AS A COUNTER.
	ADD R2 R0 R11	// COPY THE VALUE OF R11 TO R2. R10 AND R2 NOW HOLDS THE VALUE OF THE AMOUNT OF EVEN INTEGERS.
	ADD R8 R0 R0	// SET R8 TO 0. R8 WILL BE USED TO STORE AND HOLD THE REMAINDER VALUE.
	ADD R3 R0 R0	// SET R3 TO 0. R3 WILL BE USED TO STORE AND HOLD THE AVERAGE NUMBER VALUE.
	JUMPEQ R11 G	// JUMP TO POINT G IF THERE ARE NO EVEN INTEGERS AT ALL.
	
	ADD R9 R0 R0	// CLEAR R9.
	LOADI R9 R7	// STORE A COPY OF ARRAY R7 VALUE TO R9.
	ADD R8 R8 R9	// ADD UP ALL THE INTEGERS STORED IN R9 INTO R8.
	ADDI R7 -1	// ACCESS THE PREVIOUS ELEMENT OF ARRAY R7
	ADDI R2 -1	// DECREMENT R2 COUNTER BY 1
	JUMPNE R2 -5	// KEEP SUMMING UP ALL THE INTEGERS IN ARRAY R7 UNTIL THE COUNTER R2 HAS REACHED 0.
	
	// FINDING THE AVERAGE FOR EVEN GROUP OF INTEGERS (R7)
	ADDI R7 1
	SUB R8 R8 R11	// SUBTRACT R8 WITH R11 UNTIL R8 BECOMES 0, OR LESS THAN 0. AND IF LESS THAN 0, REVERT 1 STEP BACKWARD AND KEEP THE VALUE AS REMAINDER.
	ADDI R3 1	// ADD 1 TO THE VALUE OF AVERAGE
	JUMPGT R8 -2	// AS LONG AS THE REMAINDER IS GREATER THAN 0 AND GREATER THAN R11, JUST KEEP SUBTRACTING.
	JUMPEQ R8 3	// IF R8 = 0, THAT MEANS IT HAS NO REMAINDER
	ADDI R3 -1	// REVERT ONE STEP BACKWARDS
	ADD R8 R8 R10	// REVERT ONE STEP BACKWARDS 
	STORE 255 R3	// PRINT THE VALUE OF AVERAGE
	STORE 255 R8	// PRINT THE VALUE OF REMAINDER
	ADDI R1 -1	// DECREMENT THE TEST CASE BY 1
	JUMPNE R1 START	// JUMP TO START IF THE TEST CASE HAS NOT REACHED 0
	HALT

E:
	ADDI R3 1	// THE PROGRAM WILL JUMP HERE IF THERE ARE NO ODD INTEGERS IN THE ARRAY
	STORE 255 R3	// DISPLAY THE VALUE OF R3 WHICH IS 1 ON THE SCREEN
	STORE 255 R8	// DISPLAY THE VALUE OF R8 WHICH MEANS 0 REMAINDER ON THE SCREEN
	JUMPEQ R10 F	// JUMP TO THE SECTION WHERE WE FIND THE TOTAL SUM FOR EVEN GROUP OF INTEGERS

G:	ADDI R3 2	// THE PROGRAM WILL JUMP HERE IF THERE ARE NO EVEN INTEGERS IN THE ARRAY
	STORE 255 R3	// DISPLAY THE VALUE OF R3 WHICH IS 2 ON THE SCREEN
	STORE 255 R8	// DISPLAY THE VALUE OF R8 WHICH MEANS 0 REMAINDER ON THE SCREEN
	ADDI R1 -1	// DECREMENT THE TEST CASE BY 1
	JUMPNE R1 START	// JUMP TO START IF THE TEST CASE HAS NOT REACHED 0	 
	HALT
	